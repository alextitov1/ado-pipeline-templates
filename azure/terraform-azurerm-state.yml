parameters:
  - name: exampleList
    displayName: "List of example environment to be tested."
    type: object
    default:
      - dev
  - name: connectedServiceNameARM
    displayName: "Name of the connected service to use for the ARM deployment."
    type: string
    default: armTerraformStatefileDEV

  - name: connectedServiceNameDeployment
    displayName: "Name of the connected service to use for the ARM deployment."
    type: string
    default: armTerraformDeploymentDEV

  # - name: dockerRegistryServiceConnection
  #   displayName: "Name of the connected service to use to connect to the Docker (ACR) registry of the same name."
  #   type: string
  #   default: "#{DockerServiceConnectedName}#"
  # - name: dockerPreCommitImageTag
  #   displayName: "Docker Tag of the pre-commit image to use during the validation."
  #   type: string
  #   default: "main"
  # - name: dockerPreCommitImageName
  #   displayName: "Name of the pre-commit image to use during the validation."
  #   type: string
  #   default: "docker-pre-commit"

# resources:
#   repositories:
#     - repository: ado-pipeline-templates
#       name: alextitov1/ado-pipeline-templates
#       type: github
#       ref: refs/heads/main
#       endpoint: alextitov1

trigger: none

variables:
  connectedServiceNameARM: "${{ parameters.connectedServiceNameARM }}"
  connectedServiceNameDeployment: "${{ parameters.connectedServiceNameDeployment }}"
  # dockerRegistryServiceConnection: "${{ parameters.dockerRegistryServiceConnection }}"
  # dockerPreCommitRegistry: "$(dockerRegistryServiceConnection).azurecr.io"
  # dockerPreCommitImageTag: "${{ parameters.dockerPreCommitImageTag }}"
  # dockerPreCommitImageName: "${{ parameters.dockerPreCommitImageName }}"
  # dockerfileDirectoryPath: "$(Build.StagingDirectory)"
  # dockerfileName: "Dockerfile"
  artifactName: "$(Build.BuildNumber)"
  
  # TODO: convert to paraparameters
  terraformStateResourceGroupName: rg-tf-state-dev
  terraformStateStorageAccountName: stterraformstatedev01
  terraformStateBlobContainerName: template-dev
  terraformPlanBlobContainerName: template-dev
  ARM_USE_AZUREAD: true
  ARM_DISABLE_TERRAFORM_PARTNER_ID: true

stages:
  - stage: validateCode
    displayName: "Validation"
    jobs:
      - job: createBuildArtifact
        displayName: "Create pipeline artifact"
        steps:
          - checkout: self
          - template: ../steps/tools/create-build-artifact.yml
            parameters:
              sourceDirectory: "$(Build.SourcesDirectory)"
              artifactDirectory: "$(Build.ArtifactStagingDirectory)"
              artifactName: "$(artifactName)"
      # - job: runPreCommit
      #   dependsOn: createBuildArtifact
      #   displayName: "Run pre-commit on the code"
      #   workspace:
      #     clean: all
      #   steps:
      #     - checkout: none
      #     - task: DownloadBuildArtifacts@0
      #       inputs:
      #         artifactName: "$(artifactName)"
      #         downloadPath: "$(System.ArtifactsDirectory)"
      #     - task: Docker@2
      #       displayName: Login to Docker container registry
      #       name: dockerRegistryLogin
      #       inputs:
      #         command: login
      #         containerRegistry: "$(dockerRegistryServiceConnection)"
      #     - template: steps/codequality/run-pre-commit.yaml@azure-devops-templates-iac
      #       parameters:
      #         workingDirectoryPath: "$(System.ArtifactsDirectory)/$(artifactName)"
      #         enableGitInitialization: "true"
      #         dockerPreCommitImageName: "$(dockerPreCommitImageName)"
      #         dockerPreCommitImageTag: "$(dockerPreCommitImageTag)"
      #         dockerPreCommitRegistry: "$(dockerPreCommitRegistry)"
      #     - task: Docker@2
      #       displayName: Logout of target Docker container registry
      #       name: dockerRegistryLogout
      #       condition: succeededOrFailed()
      #       inputs:
      #         command: logout
      #         containerRegistry: "$(dockerRegistryServiceConnection)"

  - stage: deployTerraformModuleExamples
    displayName: "Deployment"
    dependsOn: validateCode
    jobs:
      - ${{ each example in parameters.exampleList }}:
          - job: deployTerraformModuleExample_${{ example }}
            displayName: "${{ example }} - Deploy Test Terraform module"
            workspace:
              clean: all
            steps:
              - checkout: none
              - task: DownloadBuildArtifacts@0
                inputs:
                  artifactName: "$(artifactName)"
                  downloadPath: "$(System.ArtifactsDirectory)"
              - template: ../steps/terraform/run-azure-terraform-deployment.yml
                parameters:
                  environment: "${{ example }}"
                  connectedServiceNameARM: "$(connectedServiceNameARM)"
                  connectedServiceNameDeployment: "$(connectedServiceNameDeployment)"
                  workingDirectoryPath: "$(System.ArtifactsDirectory)/$(artifactName)/examples/${{ example }}/"
                  enableTerraformRemoteBackend: "true"
                  enableTerraformPlanUpload: "true"
                  enableTerraformApplyLocal: "false"
                  enableTerraformApplyRemote: "true"
                  enableTerraformApplyDestroy: "false"
                  terraformPlanfileName: "${{ example }}$(artifactName).tfplan"
                  terraformStateConnectedServiceNameARM: "$(connectedServiceNameARM)"
                  terraformStateResourceGroupName: "$(terraformStateResourceGroupName)"
                  terraformStateStorageAccountName: "$(terraformStateStorageAccountName)"
                  terraformStateBlobContainerName: "$(terraformStateBlobContainerName)"
                  terraformStatefileName: "${{ example }}$(Build.Repository.Name).tfstate"
                  terraformPlanBlobContainerName: "$(terraformPlanBlobContainerName)"