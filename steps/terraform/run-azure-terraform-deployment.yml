parameters:
  - name: "environment"
    displayName: "(String) Name of the environment where the resource will be deployed."
    type: string
    default: "test"
  - name: "connectedServiceNameARM"
    displayName: "(String) Name of the DevOps Service Connection to use."
    type: string
  - name: "connectedServiceNameDeployment"
    displayName: "(String) Name of the DevOps Service Connection to use."
    type: string
  - name: "workingDirectoryPath"
    displayName: "(String) Path of the working directory. Should be the directory with Terraform code."
    type: string
    default: "$(System.DefaultWorkingDirectory)"
  - name: enableTerraformRemoteBackend
    displayName: "(String) Text boolean defining if the use of a remote backend should be enabled. Should be set to true if used in non-ephemeral environment."
    type: string
    default: "false"
  - name: "terraformStateConnectedServiceNameARM"
    displayName: "(String) Name of the Service Connection of the SP that have access to the storage account dedicated to states and plan files."
    type: string
    default: "state"
  - name: "terraformStateResourceGroupName"
    displayName: "(String) Name of the resource group containing the storage account dedicated to states and plan files."
    type: string
    default: "rg1"
  - name: "terraformStateStorageAccountName"
    displayName: "(String) Name of the storage account dedicated to states and plan files."
    type: string
    default: "storageaccount1"
  - name: "terraformStateBlobContainerName"
    displayName: "(String) Name of the blob container that will host the state file."
    type: string
    default: "statecontainer"
  - name: "terraformStatefileName"
    displayName: "(String) Name of the blob state file."
    type: string
    default: "blob.tfstate"
  - name: enableTerraformPlanUpload
    displayName: "(String) Text boolean defining if the plan file needs to be uploaded to the storage account to be reused later (ex: after manual validation)."
    type: string
    default: "false"
  - name: "terraformPlanBlobContainerName"
    displayName: "(String) Name of the blob container that will host the plan file."
    type: string
    default: "plancontainer"
  - name: "terraformPlanfileName"
    displayName: "(String) Name of the blob plan file."
    type: string
    default: "tfplan_buildid.tfplan"
  - name: "terraformParametersFilePath"
    displayName: "(String) Path to the JSON or HCL Terraform Parameter file for the deployment."
    type: string
    default: ""
  - name: enableTerraformApplyLocal
    displayName: "(String) Text boolean defining if the apply part of the pipeline should be enabled."
    type: string
    default: "false"
  - name: enableTerraformApplyRemote
    displayName: "(String) Text boolean defining if a plan file saved previously should be deployed. "
    type: string
    default: "false"
  - name: enableTerraformApplyDestroy
    displayName: "(String) Text boolean defining if a currently deployed infrastructure needs to be deleted."
    type: string
    default: "false"
  

steps:

  - ${{ if eq(parameters.enableTerraformRemoteBackend, 'true') }}:
      - task: AzureCLI@2
        name: terraformInitRemote_${{ parameters.environment }}
        displayName: "Terraform Init - Remote Backend"
        inputs:
          azureSubscription: ${{ parameters.connectedServiceNameARM  }}
          scriptLocation: inlineScript
          scriptType: bash
          addSpnToEnvironment: true
          workingDirectory: ${{ parameters.workingDirectoryPath }}
          inlineScript: |

            printenv | sort

            terraform init \
              -input=false \
              -backend-config='resource_group_name=${{ parameters.terraformStateResourceGroupName }}' \
              -backend-config='storage_account_name=${{ parameters.terraformStateStorageAccountName }}' \
              -backend-config='container_name=${{ parameters.terraformStateBlobContainerName }}' \
              -backend-config='key=${{ parameters.terraformStatefileName }}'

  # TODO: Add a task to use local init
  # - ${{ if eq(parameters.enableTerraformRemoteBackend, 'false') }}:
  #     - task: Bash@3
  #       name: terraformInitLocalBackend_${{ parameters.environment }}
  #       displayName: "Terraform Init - Local Backend"
  #       inputs:
  #         targetType: 'inline'
  #         workingDirectory: ${{ parameters.workingDirectoryPath }}
  #         script: |

  #           terraform init -input=false

  - task: AzureCLI@2
    name: terraformPlan_${{ parameters.environment }}
    displayName: "Terraform Plan"
    inputs:
      azureSubscription: ${{ parameters.connectedServiceNameDeployment }}
      scriptLocation: inlineScript
      scriptType: bash
      workingDirectory: ${{ parameters.workingDirectoryPath }}
      inlineScript: |
        export ARM_SKIP_PROVIDER_REGISTRATION="true"

        printenv | sort

        if [ -z "${{ parameters.terraformParametersFilePath }}" ]; then
          terraform plan -out "./${{ parameters.terraformPlanFileName }}" -no-color
        else
          terraform plan -var-file="${{ parameters.terraformParametersFilePath }}" -out "./${{ parameters.terraformPlanFileName }}" -no-color
        fi

  - ${{ if eq(parameters.enableTerraformPlanUpload, 'true') }}:
      - task: AzureCLI@2
        name: terraformPlanUpload_${{ parameters.environment }}
        displayName: "Upload Terraform Plan to storage account"
        inputs:
          azureSubscription: ${{ parameters.connectedServiceNameARM  }}
          scriptLocation: inlineScript
          scriptType: bash
          workingDirectory: ${{ parameters.workingDirectoryPath }}
          inlineScript: |
            az storage blob upload \
              --auth-mode login \
              --account-name ${{ parameters.terraformStateStorageAccountName }} \
              -n ${{ parameters.terraformPlanFileName }} \
              -f ./${{ parameters.terraformPlanFileName }} \
              -c ${{ parameters.terraformPlanBlobContainerName }}
            
            rm -f ./${{ parameters.terraformPlanFileName }}


  - ${{ if eq(parameters.enableTerraformApplyRemote, 'true') }}:
      - task: AzureCLI@2
        name: downloadRemotePlan_${{ parameters.environment }}
        displayName: "Download - Remote Plan"
        inputs:
          azureSubscription: ${{ parameters.connectedServiceNameARM  }}
          scriptLocation: inlineScript
          scriptType: bash
          workingDirectory: ${{ parameters.workingDirectoryPath }}
          inlineScript: |
            az storage blob download \
              --auth-mode login \
              --account-name ${{ parameters.terraformStateStorageAccountName }} \
              --container-name ${{ parameters.terraformPlanBlobContainerName }} \
              --name ${{ parameters.terraformPlanFileName }} \
              --file ./${{ parameters.terraformPlanFileName }}
            
              # az storage blob delete \
              # --auth-mode login \
              # --account-name ${{ parameters.terraformStateStorageAccountName }} \
              # --container-name ${{ parameters.terraformPlanBlobContainerName }} \
              # --name ${{ parameters.terraformPlanFileName }}

      - task: AzureCLI@2
        name: terraformApplyRemotePlan_${{ parameters.environment }}
        displayName: "Terraform Apply - Remote Plan"
        inputs:
          azureSubscription: ${{ parameters.connectedServiceNameDeployment  }}
          scriptLocation: inlineScript
          scriptType: bash
          workingDirectory: ${{ parameters.workingDirectoryPath }}
          addSpnToEnvironment: true
          inlineScript: |
            terraform show ./${{ parameters.terraformPlanFileName }}

            terraform apply ./${{ parameters.terraformPlanFileName }} -no-color

  # TODO: Add terraform destroy scenario
  # - ${{ if eq(parameters.enableTerraformApplyDestroy, 'true') }}:
  #     - task: AzureCLI@2
  #       name: terraformDestroy_${{ parameters.environment }}
  #       displayName: "Terraform Destroy"
  #       inputs:
  #         azureSubscription: ${{ parameters.connectedServiceNameARM  }}
  #         scriptLocation: inlineScript
  #         scriptType: pscore
  #         workingDirectory: ${{ parameters.workingDirectoryPath }}
  #         inlineScript: |
  #           $env:ARM_CLIENT_ID="$(armClientId)"
  #           $env:ARM_CLIENT_SECRET="$(armClientSecret)"
  #           $env:ARM_SUBSCRIPTION_ID="$(armSubscriptionId)"
  #           $env:ARM_TENANT_ID="$(armTenantId)"
  #           if( "" -eq "${{ parameters.terraformParametersFilePath }}" ){
  #             terraform apply -destroy -auto-approve -no-color -input=false
  #           }
  #           else{
  #             terraform apply -destroy -var-file='${{ parameters.terraformParametersFilePath }}' -auto-approve -no-color -input=false
  #           }